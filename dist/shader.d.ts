export declare const VERTEX_SHADER_SOURCE = "\nattribute vec2 position;\nattribute vec2 uv;\nuniform vec2 uvScale;\nvarying vec2 vUv;\n\nvoid main() {\n\n\tgl_Position = vec4( position, 1., 1. );\n\n\tvUv = uv;\n\n\tif ( uvScale.y < 1.0 ) {\n\n\t\tfloat offset = ( 1.0 - uvScale.y ) * .5;\n\t\tvUv.y = vUv.y * uvScale.y + offset;\n\n\t} else {\n\n\t\tfloat offset = ( 1.0 - uvScale.x ) * .5;\n\t\tvUv.x = vUv.x * uvScale.x + offset;\n\n\t}\n\n}\n";
export declare const FRAGMENT_SHADER_SOURCE = "\nprecision highp float;\nvarying vec2 vUv;\nuniform float intensity, direction, progress, disableFromImage, disableToImage;\nuniform sampler2D textureFrom, textureTo, textureDisplacement;\n\nfloat defaultAngle = 3.14159265 / 4.;\n\nmat2 rotationMatrix( float angle ) {\n\n\tfloat s = sin( angle );\n\tfloat c = cos( angle );\n\treturn mat2( c, -s, s, c );\n\n}\n\n\nvoid main() {\n\n\tvec2 displacement = rotationMatrix( defaultAngle + direction ) * texture2D( textureDisplacement, vUv ).xy;\n\tvec2 distortedPosition1 = vUv + displacement * intensity * progress;\n\tvec2 distortedPosition2 = vUv + displacement * intensity * ( 1.0 - progress );\n\tvec4 fromColor = texture2D( textureFrom, distortedPosition1 );\n\tvec4 toColor = texture2D( textureTo, distortedPosition2 );\n\n\tif ( disableFromImage == 1.0 ) {\n\n\t\tif ( distortedPosition2.x < 0.0 || distortedPosition2.x > 1.0 || distortedPosition2.y < 0.0 || distortedPosition2.y > 1.0 ) {\n\n\t\t\tgl_FragColor = vec4( 0. );\n\n\t\t} else {\n\n\t\t\tgl_FragColor = vec4( toColor.rgb, toColor.a * progress );\n\n\t\t}\n\n\t} else if ( disableToImage == 1.0 ) {\n\n\t\tif ( distortedPosition1.x < 0.0 || distortedPosition1.x > 1.0 || distortedPosition1.y < 0.0 || distortedPosition1.y > 1.0 ) {\n\n\t\t\tgl_FragColor = vec4( 0. );\n\n\t\t} else {\n\n\t\t\tgl_FragColor = vec4( fromColor.rgb, fromColor.a * ( 1.0 - progress ) );\n\n\t\t}\n\n\t} else {\n\n\t\tgl_FragColor = mix( fromColor, toColor, progress );\n\n\t}\n\n}\n";
